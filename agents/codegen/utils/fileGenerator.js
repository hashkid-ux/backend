const path = require('path');
const CodeFormatter = require('./codeFormatter');

class FileGenerator {
  constructor(projectName) {
    this.projectName = projectName;
    this.files = {};
    this.structure = {
      frontend: {},
      backend: {},
      shared: {},
    };
  }

  addFile(filePath, content, category = 'frontend') {
    this.files[filePath] = content;
    
    if (!this.structure[category]) {
      this.structure[category] = {};
    }
    
    this.structure[category][filePath] = {
      size: content.length,
      lines: content.split('\n').length,
    };
  }

  async generateFrontendStructure(framework = 'react') {
    const structure = {
      react: this.getReactStructure(),
      nextjs: this.getNextJsStructure(),
      'react-native': this.getReactNativeStructure(),
    };

    return structure[framework] || structure.react;
  }

  getReactStructure() {
    return {
      'public/index.html': this.generateIndexHtml(),
      'public/favicon.ico': '/* Placeholder */',
      'src/index.js': this.generateReactIndex(),
      'src/App.js': '/* Will be generated by AI */',
      'src/App.css': this.generateBasicCss(),
      'src/components/': 'Directory for components',
      'src/pages/': 'Directory for pages',
      'src/services/': 'Directory for API services',
      'src/utils/': 'Directory for utilities',
      'src/assets/': 'Directory for images, fonts',
      'package.json': this.generateReactPackageJson(),
      '.gitignore': this.generateGitignore(),
      'README.md': this.generateReadme(),
    };
  }

  getNextJsStructure() {
    return {
      'pages/index.js': '/* Homepage */',
      'pages/api/hello.js': '/* API route */',
      'pages/_app.js': this.generateNextAppJs(),
      'pages/_document.js': this.generateNextDocumentJs(),
      'components/': 'Directory',
      'public/': 'Static files',
      'styles/globals.css': this.generateBasicCss(),
      'package.json': this.generateNextPackageJson(),
      'next.config.js': this.generateNextConfig(),
      '.gitignore': this.generateGitignore(),
    };
  }

  getReactNativeStructure() {
    return {
      'App.js': '/* Main app component */',
      'app.json': this.generateAppJson(),
      'package.json': this.generateRNPackageJson(),
      'babel.config.js': this.generateBabelConfig(),
      'metro.config.js': '/* Metro config */',
      'src/': 'Source directory',
    };
  }

  generateBackendStructure(database = 'postgresql') {
    return {
      'server.js': '/* Main server file */',
      'routes/': 'API routes',
      'controllers/': 'Business logic',
      'models/': 'Database models',
      'middleware/': 'Express middleware',
      'config/': 'Configuration files',
      'utils/': 'Helper functions',
      '.env.example': this.generateEnvExample(),
      'package.json': this.generateBackendPackageJson(database),
      '.gitignore': this.generateGitignore(),
    };
  }

  // Template generators
  generateIndexHtml() {
    return `<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" href="%PUBLIC_URL%/favicon.ico" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="theme-color" content="#000000" />
    <meta name="description" content="${this.projectName} - Built with Launch AI" />
    <title>${this.projectName}</title>
  </head>
  <body>
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <div id="root"></div>
  </body>
</html>`;
  }

  generateReactIndex() {
    return `import React from 'react';
import ReactDOM from 'react-dom/client';
import './index.css';
import App from './App';

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
);`;
  }

  generateBasicCss() {
    return `* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

body {
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',
    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
    sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

code {
  font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New', monospace;
}`;
  }

  generateReactPackageJson() {
    return JSON.stringify(
      CodeFormatter.generatePackageJson(
        this.projectName,
        {
          react: '^18.2.0',
          'react-dom': '^18.2.0',
          'react-router-dom': '^6.20.0',
          axios: '^1.6.0',
        },
        {
          '@testing-library/react': '^14.0.0',
          '@testing-library/jest-dom': '^6.0.0',
        }
      ),
      null,
      2
    );
  }

  generateNextPackageJson() {
    return JSON.stringify(
      CodeFormatter.generatePackageJson(
        this.projectName,
        {
          next: '^14.0.0',
          react: '^18.2.0',
          'react-dom': '^18.2.0',
        }
      ),
      null,
      2
    );
  }

  generateRNPackageJson() {
    return JSON.stringify(
      {
        name: this.projectName.toLowerCase().replace(/\s+/g, '-'),
        version: '1.0.0',
        main: 'node_modules/expo/AppEntry.js',
        scripts: {
          start: 'expo start',
          android: 'expo start --android',
          ios: 'expo start --ios',
        },
        dependencies: {
          expo: '~49.0.0',
          react: '18.2.0',
          'react-native': '0.72.0',
        },
      },
      null,
      2
    );
  }

  generateBackendPackageJson(database) {
    const deps = {
      express: '^4.18.2',
      cors: '^2.8.5',
      dotenv: '^16.3.1',
      helmet: '^7.1.0',
      'express-rate-limit': '^7.1.0',
    };

    if (database === 'postgresql') {
      deps.pg = '^8.11.0';
      deps['@prisma/client'] = '^5.0.0';
    } else if (database === 'mongodb') {
      deps.mongoose = '^8.0.0';
    }

    return JSON.stringify(
      CodeFormatter.generatePackageJson(this.projectName, deps, {
        nodemon: '^3.0.2',
        jest: '^29.7.0',
      }),
      null,
      2
    );
  }

  generateNextAppJs() {
    return `export default function App({ Component, pageProps }) {
  return <Component {...pageProps} />;
}`;
  }

  generateNextDocumentJs() {
    return `import { Html, Head, Main, NextScript } from 'next/document';

export default function Document() {
  return (
    <Html lang="en">
      <Head />
      <body>
        <Main />
        <NextScript />
      </body>
    </Html>
  );
}`;
  }

  generateNextConfig() {
    return `/** @type {import('next').NextConfig} */
const nextConfig = {
  reactStrictMode: true,
};

module.exports = nextConfig;`;
  }

  generateAppJson() {
    return JSON.stringify(
      {
        expo: {
          name: this.projectName,
          slug: this.projectName.toLowerCase().replace(/\s+/g, '-'),
          version: '1.0.0',
          orientation: 'portrait',
          icon: './assets/icon.png',
          userInterfaceStyle: 'light',
          splash: {
            image: './assets/splash.png',
            resizeMode: 'contain',
            backgroundColor: '#ffffff',
          },
          assetBundlePatterns: ['**/*'],
          ios: {
            supportsTablet: true,
          },
          android: {
            adaptiveIcon: {
              foregroundImage: './assets/adaptive-icon.png',
              backgroundColor: '#ffffff',
            },
          },
        },
      },
      null,
      2
    );
  }

  generateBabelConfig() {
    return `module.exports = function(api) {
  api.cache(true);
  return {
    presets: ['babel-preset-expo'],
  };
};`;
  }

  generateEnvExample() {
    return `# Server
PORT=5000
NODE_ENV=development

# Database
DATABASE_URL=postgresql://user:password@localhost:5432/dbname

# JWT
JWT_SECRET=your_jwt_secret_here

# External APIs
API_KEY=your_api_key_here`;
  }

  generateGitignore() {
    return `node_modules/
.env
.DS_Store
*.log
dist/
build/
coverage/
.vscode/
.idea/`;
  }

  generateReadme() {
    return `# ${this.projectName}

Built with Launch AI ðŸš€

## Getting Started

\`\`\`bash
npm install
npm start
\`\`\`

## Features

- Modern tech stack
- Production-ready code
- Fully tested
- Easy deployment

## Tech Stack

- Frontend: React
- Backend: Node.js + Express
- Database: PostgreSQL
- Deployment: Vercel/AWS

---

Generated by [Launch AI](https://launch-ai.com)`;
  }

  async generateZipStructure() {
    // Create a structure suitable for ZIP download
    const structure = {
      [`${this.projectName}/`]: {
        frontend: this.structure.frontend,
        backend: this.structure.backend,
        'README.md': this.generateReadme(),
      },
    };

    return structure;
  }

  getStats() {
    const allFiles = Object.keys(this.files);
    const totalLines = Object.values(this.files).reduce(
      (sum, content) => sum + content.split('\n').length,
      0
    );
    const totalSize = Object.values(this.files).reduce(
      (sum, content) => sum + content.length,
      0
    );

    return {
      total_files: allFiles.length,
      total_lines: totalLines,
      total_size_bytes: totalSize,
      total_size_kb: (totalSize / 1024).toFixed(2),
      categories: {
        frontend: Object.keys(this.structure.frontend).length,
        backend: Object.keys(this.structure.backend).length,
        shared: Object.keys(this.structure.shared).length,
      },
    };
  }
}

module.exports = FileGenerator;